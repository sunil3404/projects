from fastapi import APIRouter, Depends, HTTPException
import schemas, models
from database import SessionLocal
import database
from sqlalchemy.orm import Session
from models import Department
from repository import stud as stud_rep


router = APIRouter()

@router.post("/create_students")
def create_student(student : schemas.Students_Registration, 
                   db: Session = Depends(database.get_db)):
    dept = db.query(Department).filter(Department.dept_name == student.department).first()
    if dept:
        new_stud = stud_rep.create_student(db, student)
        
    else:
        raise HTTPException(status_code=404, detail=f"{student.department} department does not exist")
    return new_stud

@router.get("/all_student")
def fetch_all_students(db: Session = Depends(database.get_db)):
    all_students = db.query(models.Student).all()

    return all_students 

@router.get("/{id}")
def fetch_student_by_id(id, db : Session = Depends(database.get_db)):
    student = db.query(models.Student).filter(models.Student.id == id).first()
    if not student:
        raise HTTPException(status_code=404, detail=f"student with id {id} does not exist")
    return student

@router.get("/dept/{depat_id}")
def fetch_students_by_dept_name(depat_id, db : Session = Depends(database.get_db)):
    student = db.query(models.Student).filter(models.Student.depat_id == depat_id).all()
    if not student:
        raise HTTPException(status_code=404, detail=f"{depat_id} doest not exist")

    return student

@router.get("/gender/{gender}")
def fetch_students_by_gender(gender, db : Session = Depends(database.get_db)):
    students = db.query(models.Student).filter(models.Student.sex == gender.capitalize()).all()

    if not students:
        raise HTTPException(status_code=404, detail=f"No student exists with gender as {gender}")
    return students



